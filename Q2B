wap a program using system calls to copy the contents of a file and create four files each containing 1/4 contents of the file.

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>

#define BUF_SIZE 1024

int main(int argc, char *argv[]) {
    int fd_in, fd_out1, fd_out2, fd_out3, fd_out4;
    ssize_t num_read, num_written;
    char buf[BUF_SIZE];
    
    // Open the input file for reading
    fd_in = open(argv[1], O_RDONLY);
    if (fd_in == -1) {
        perror("open");
        exit(EXIT_FAILURE);
    }
    
    // Open the four output files for writing
    fd_out1 = open("output1.txt", O_CREAT | O_WRONLY, S_IRUSR | S_IWUSR);
    fd_out2 = open("output2.txt", O_CREAT | O_WRONLY, S_IRUSR | S_IWUSR);
    fd_out3 = open("output3.txt", O_CREAT | O_WRONLY, S_IRUSR | S_IWUSR);
    fd_out4 = open("output4.txt", O_CREAT | O_WRONLY, S_IRUSR | S_IWUSR);
    if (fd_out1 == -1 || fd_out2 == -1 || fd_out3 == -1 || fd_out4 == -1) {
        perror("open");
        exit(EXIT_FAILURE);
    }
    
    // Read the input file and write to the four output files
    while ((num_read = read(fd_in, buf, BUF_SIZE)) > 0) {
        num_written = write(fd_out1, buf, num_read / 4);
        if (num_written == -1) {
            perror("write");
            exit(EXIT_FAILURE);
        }
        num_written = write(fd_out2, buf + num_read / 4, num_read / 4);
        if (num_written == -1) {
            perror("write");
            exit(EXIT_FAILURE);
        }
        num_written = write(fd_out3, buf + num_read / 2, num_read / 4);
        if (num_written == -1) {
            perror("write");
            exit(EXIT_FAILURE);
        }
        num_written = write(fd_out4, buf + num_read * 3 / 4, num_read / 4);
        if (num_written == -1) {
            perror("write");
            exit(EXIT_FAILURE);
        }
    }
    
    // Close all the file descriptors
    close(fd_in);
    close(fd_out1);
    close(fd_out2);
    close(fd_out3);
    close(fd_out4);
    
    return 0;
}

