#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int shared = 5;
pthread_mutex_t lock;

void *func1(void *arg) {
  int local;
  pthread_mutex_lock(&lock);  // enter critical section
  local = shared;
  local = local + 1;
  sleep(5);  // simulate a context switch
  shared = local;
  printf("shared in func1: %d\n", shared);
  pthread_mutex_unlock(&lock);  // leave critical section
  pthread_exit(NULL);
}

void *func2(void *arg) {
  int local;
  pthread_mutex_lock(&lock);  // enter critical section
  local = shared;
  local = local - 1;
  shared = local;
  printf("shared in func2: %d\n", shared);
  pthread_mutex_unlock(&lock);  // leave critical section
  pthread_exit(NULL);
}

int main() {
  pthread_t t1, t2;

  pthread_mutex_init(&lock, NULL);  // initialize mutex

  pthread_create(&t1, NULL, func1, NULL);
  pthread_create(&t2, NULL, func2, NULL);

  pthread_join(t1, NULL);
  pthread_join(t2, NULL);
    
  printf("the final value of shared variable: %d\n",shared);
 
  pthread_mutex_destroy(&lock);  // destroy mutex

  return 0;
}
