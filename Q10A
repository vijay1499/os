WAP to provide synchronization among processes using semaphore variables.



#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <semaphore.h>
#include <fcntl.h>

int main(int argc, char *argv[])
{
    sem_t *sem;

    // Create a semaphore with an initial value of 1
    sem = sem_open("/my_semaphore", O_CREAT | O_EXCL, 0644, 1);
    if (sem == SEM_FAILED) {
        perror("Error creating semaphore");
        exit(1);
    }

    // Fork a child process
    pid_t pid = fork();
    if (pid < 0) {
        perror("Error forking process");
        exit(1);
    } else if (pid == 0) {
        // Child process: wait for semaphore to be released
        sem_wait(sem);

        printf("Child process running\n");

        // Release the semaphore
        sem_post(sem);

        // Close the semaphore and exit
        sem_close(sem);
        exit(0);
    } else {
        // Parent process: wait for semaphore to be released
        sem_wait(sem);

        printf("Parent process running\n");

        // Release the semaphore
        sem_post(sem);

        // Wait for child process to complete
        wait(NULL);

        // Close and unlink the semaphore
        sem_close(sem);
        sem_unlink("/my_semaphore");

        // Exit
        exit(0);
    }
}
