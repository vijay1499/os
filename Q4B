 Write a program using systems for operations on processes to create a hierarchy of processes P1 ? P2 ? P3? P4. Also, print the id and parent id for each process.
 
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() {
    int i;
    pid_t pid, ppid;

    // Create the first process P1
    printf("P1: id=%d parent_id=%d\n", getpid(), getppid());

    // Create the second process P2
    if ((pid = fork()) == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    } else if (pid == 0) {
        // Child process
        printf("P2: id=%d parent_id=%d\n", getpid(), getppid());

        // Create the third process P3
        if ((pid = fork()) == -1) {
            perror("fork");
            exit(EXIT_FAILURE);
        } else if (pid == 0) {
            // Child process
            printf("P3: id=%d parent_id=%d\n", getpid(), getppid());
            exit(EXIT_SUCCESS);
        }
        
        // Wait for P3 to finish
        wait(NULL);
        exit(EXIT_SUCCESS);
    }

    // Wait for P2 to finish
    wait(NULL);

    // Create the 37th process P37
    for (i = 4; i <= 37; i++) {
        if ((pid = fork()) == -1) {
            perror("fork");
            exit(EXIT_FAILURE);
        } else if (pid == 0) {
            // Child process
            printf("P%d: id=%d parent_id=%d\n", i, getpid(), getppid());
            exit(EXIT_SUCCESS);
        }
    }

    // Wait for all child processes to finish
    while (wait(NULL) > 0);

    // Create the last process P4
    printf("P4: id=%d parent_id=%d\n", getpid(), getppid());

    return 0;
}
