#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/ipc.h>
#include <sys/sem.h>

#define SEM_KEY 1234
#define NUM_SEMS 1

union semun {
    int val;
    struct semid_ds *buf;
    unsigned short *array;
};

int main() {
    // create a semaphore set with one semaphore
    int semid = semget(SEM_KEY, NUM_SEMS, IPC_CREAT | 0666);
    if (semid == -1) {
        perror("semget");
        exit(1);
    }

    // initialize the semaphore to 1 (unlocked)
    union semun arg;
    arg.val = 1;
    if (semctl(semid, 0, SETVAL, arg) == -1) {
        perror("semctl");
        exit(1);
    }

    // create a child process
    pid_t pid = fork();
    if (pid == -1) {
        perror("fork");
        exit(1);
    } else if (pid == 0) {
        // child process
        for (int i = 0; i < 1000000; i++) {
            // wait for the semaphore to become available
            struct sembuf sops = {0, -1, 0};
            semop(semid, &sops, 1);

            // increment the shared variable
            int *shared_variable = (int*) shmat(shm_id, NULL, 0);
            (*shared_variable)++;
            shmdt(shared_variable);

            // release the semaphore
            sops.sem_op = 1;
            semop(semid, &sops, 1);
        }
    } else {
        // parent process
        for (int i = 0; i < 1000000; i++) {
            // wait for the semaphore to become available
            struct sembuf sops = {0, -1, 0};
            semop(semid, &sops, 1);

            // increment the shared variable
            int *shared_variable = (int*) shmat(shm_id, NULL, 0);
            (*shared_variable)++;
            shmdt(shared_variable);

            // release the semaphore
            sops.sem_op = 1;
            semop(semid, &sops, 1);
        }
    }

    // remove the semaphore set
    if (semctl(semid, 0, IPC_RMID, 0) == -1) {
        perror("semctl");
        exit(1);
    }

    // print the value of the shared variable
    int *shared_variable = (int*) shmat(shm_id, NULL, 0);
    printf("Shared variable: %d\n", *shared_variable);
    shmdt(shared_variable);

    return 0;
}
