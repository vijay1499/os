//Write a C program that takes a file name as a command-line argument. Use the open, dup, and dup2 system calls to open the file, 
//create two duplicate file descriptors for it, and redirect the standard input and standard output to those file descriptors. 
//Then, read from the standard input and write to the standard output.



#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>

int main(int argc, char *argv[]) {
    if (argc < 2) {
        fprintf(stderr, "Usage: %s filename\n", argv[0]);
        exit(1);
    }
    
    // Open the file for reading and writing
    int fd = open(argv[1], O_RDWR);
    if (fd == -1) {
        perror("open");
        exit(1);
    }
    
    // Create two duplicate file descriptors
    int fd1 = dup(fd);
    int fd2 = dup(fd);
    if (fd1 == -1 || fd2 == -1) {
        perror("dup");
        exit(1);
    }
    
    // Redirect standard input and output to the duplicate file descriptors
    if (dup2(fd1, STDIN_FILENO) == -1 || dup2(fd2, STDOUT_FILENO) == -1) {
        perror("dup2");
        exit(1);
    }
    
    // Read from standard input and write to standard output
    char buf[1024];
    ssize_t nread;
    while ((nread = read(STDIN_FILENO, buf, sizeof(buf))) > 0) {
        if (write(STDOUT_FILENO, buf, nread) == -1) {
            perror("write");
            exit(1);
        }
    }
    if (nread == -1) {
        perror("read");
        exit(1);
    }
    
    // Close the file and file descriptors
    if (close(fd) == -1 || close(fd1) == -1 || close(fd2) == -1) {
        perror("close");
        exit(1);
    }
    
    return 0;
}
