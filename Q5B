) WAP to demonstrate race condition between two processes.

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
    pid_t pid1, pid2;
    int status;

    // Fork the first child process
    pid1 = fork();
    if (pid1 < 0) {
        perror("fork");
        exit(EXIT_FAILURE);
    }
    else if (pid1 == 0) {
        // Child process 1
        FILE* fp = fopen("output.txt", "a");
        if (fp == NULL) {
            perror("fopen");
            exit(EXIT_FAILURE);
        }

        // Write "Hello from child process 1" to the file
        fprintf(fp, "Hello from child process 1\n");
        fclose(fp);
        exit(EXIT_SUCCESS);
    }

    // Fork the second child process
    pid2 = fork();
    if (pid2 < 0) {
        perror("fork");
        exit(EXIT_FAILURE);
    }
    else if (pid2 == 0) {
        // Child process 2
        FILE* fp = fopen("output.txt", "a");
        if (fp == NULL) {
            perror("fopen");
            exit(EXIT_FAILURE);
        }

        // Write "Hello from child process 2" to the file
        fprintf(fp, "Hello from child process 2\n");
        fclose(fp);
        exit(EXIT_SUCCESS);
    }

    // Wait for both child processes to finish
    waitpid(pid1, &status, 0);
    waitpid(pid2, &status, 0);

    return 0;
}

