) WAP to solve race condition problem using lock variable.

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define NUM_THREADS 2

int shared_variable = 0;
pthread_mutex_t lock;

void *increment(void *arg)
{
    for (int i = 0; i < 1000000; i++) {
        pthread_mutex_lock(&lock);
        shared_variable++;
        pthread_mutex_unlock(&lock);
    }

    return NULL;
}

int main()
{
    pthread_t threads[NUM_THREADS];

    if (pthread_mutex_init(&lock, NULL) != 0) {
        perror("Failed to initialize mutex");
        exit(1);
    }

    for (int i = 0; i < NUM_THREADS; i++) {
        if (pthread_create(&threads[i], NULL, increment, NULL) != 0) {
            perror("Failed to create thread");
            exit(1);
        }
    }

    for (int i = 0; i < NUM_THREADS; i++) {
        if (pthread_join(threads[i], NULL) != 0) {
            perror("Failed to join thread");
            exit(1);
        }
    }

    printf("Shared variable value: %d\n", shared_variable);

    pthread_mutex_destroy(&lock);

    return 0;
}
