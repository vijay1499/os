//Write a C program that creates a named pipe (FIFO) using the mkfifo system call. Then, fork a child process. 
//In the parent process, write some data to the pipe using the write system call. In the child process, 
//read the data from the pipe using the read system call.
   
   
   #include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>

#define PIPE_NAME "myfifo"

int main() {
    // Create the named pipe (FIFO)
    if (mkfifo(PIPE_NAME, S_IRUSR | S_IWUSR) == -1) {
        perror("mkfifo");
        exit(1);
    }

    // Fork the child process
    pid_t pid = fork();
    if (pid == -1) {
        perror("fork");
        exit(1);
    }

    if (pid == 0) {
        // Child process reads from the pipe
        int fd = open(PIPE_NAME, O_RDONLY);
        if (fd == -1) {
            perror("open");
            exit(1);
        }

        char buf[1024];
        ssize_t nread = read(fd, buf, sizeof(buf));
        if (nread == -1) {
            perror("read");
            exit(1);
        }
        printf("Child process read from pipe: %.*s", (int)nread, buf);

        if (close(fd) == -1) {
            perror("close");
            exit(1);
        }
    } else {
        // Parent process writes to the pipe
        int fd = open(PIPE_NAME, O_WRONLY);
        if (fd == -1) {
            perror("open");
            exit(1);
        }

        const char* text = "Hello, world!";
        if (write(fd, text, strlen(text)) == -1) {
            perror("write");
            exit(1);
        }
        printf("Parent process wrote to pipe: %s\n", text);

        if (close(fd) == -1) {
            perror("close");
            exit(1);
        }
    }

    // Remove the named pipe
    if (unlink(PIPE_NAME) == -1) {
        perror("unlink");
        exit(1);
    }

    return 0;
}
