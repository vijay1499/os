//Write a C program that creates two pipes using the pipe system call. Then, fork a child process. In the parent process, use the dup2 system 
//call to redirect the standard input to one end of the pipe, and the standard output to the other end of the pipe. In the child process,
//read from the standard input and write to the standard output.


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    int pipes[2];
    pid_t pid;
    char buffer[100];

    // create the pipes
    if (pipe(pipes) == -1) {
        perror("pipe");
        exit(1);
    }

    // fork a child process
    pid = fork();
    if (pid == -1) {
        perror("fork");
        exit(1);
    }

    if (pid == 0) { // child process
        // close the write end of the pipe
        close(pipes[1]);

        // read from the read end of the pipe
        read(pipes[0], buffer, sizeof(buffer));

        // write to the standard output
        printf("Child process received: %s", buffer);

        // close the read end of the pipe
        close(pipes[0]);
    } else { // parent process
        // close the read end of the pipe
        close(pipes[0]);

        // redirect the standard input to the write end of the pipe
        if (dup2(pipes[1], STDIN_FILENO) == -1) {
            perror("dup2");
            exit(1);
        }

        // redirect the standard output to the read end of the pipe
        if (dup2(pipes[1], STDOUT_FILENO) == -1) {
            perror("dup2");
            exit(1);
        }

        // write to the standard input
        printf("Hello from parent process!\n");

        // close the write end of the pipe
        close(pipes[1]);
    }

    return 0;
}
